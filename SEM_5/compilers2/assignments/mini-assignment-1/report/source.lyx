#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 1
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 1cm
\rightmargin 1cm
\bottommargin 2cm
\headheight 1cm
\headsep 1cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
CS3423 : Mini-assignment 1
\end_layout

\begin_layout Author
Raj Patil : CS18BTECH11039
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Analysing differences between compilers and interpreters
\end_layout

\begin_layout Subsection
Few decisions:
\end_layout

\begin_layout Itemize
I'll first be listing out the theoretical differences and then moving on
 to the experiments.
 
\end_layout

\begin_layout Itemize
I'll be using python as my interpreted language and C++ as my compiled language:
 dispatching their executions into shell scripts and evaluating them over
 multiple runs in jupyter notebooks for quick comparison.
 
\end_layout

\begin_layout Itemize
For their interpreted representation, I'll be presenting the source and
 the mapped representation here itself.
 
\end_layout

\begin_layout Itemize
For python, I'll use the dis.dis module (the dis-assembler that gives somewhat
 pseudo assembly code).
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle" tabularwidth="100text%">
<column alignment="center" valignment="top" width="45text%">
<column alignment="center" valignment="top" width="45text%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Compilers
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interpreters
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
converts source code to machine code (or an intermediate representation)
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
evaluates source code without an intermediate action required by the user
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
conversion and execution are decoupled
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
a REPL (read-eval-print-loop) system
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
relatively quicker
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
slower
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
displays all errors at once after the compilation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
displays errors one by one
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the execution toolchain can be clearly segmented into multiple phases at
 the user level
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
not the case
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Summary
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Observations
\end_layout

\begin_layout Subsubsection
Performance analysis:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},numbers=left"
inline false
status open

\begin_layout Plain Layout

//cpp : test1.cpp
\end_layout

\begin_layout Plain Layout

#include <iostream> 
\end_layout

\begin_layout Plain Layout

#include <functional>
\end_layout

\begin_layout Plain Layout

using namespace std;
\end_layout

\begin_layout Plain Layout

int main(){
\end_layout

\begin_layout Plain Layout

	int n=10;
\end_layout

\begin_layout Plain Layout

	const function <int(int&&,int&&)> fib = [&n,&fib](int&& i,int&& ans){
\end_layout

\begin_layout Plain Layout

		if((i++)==n) return ans;
\end_layout

\begin_layout Plain Layout

		return fib(move(i),ans*i);//tail call optimized
\end_layout

\begin_layout Plain Layout

	};
\end_layout

\begin_layout Plain Layout

	cout<<fib(0,1)<<endl;
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\begin_inset listings
lstparams "numbers=left"
inline false
status open

\begin_layout Plain Layout

#python : test1.py
\end_layout

\begin_layout Plain Layout

n=10
\end_layout

\begin_layout Plain Layout

def fib(i,ans):
\end_layout

\begin_layout Plain Layout

    if(i==n) :
\end_layout

\begin_layout Plain Layout

        return ans
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        i+=1
\end_layout

\begin_layout Plain Layout

        return fib(i,ans*i)
\end_layout

\begin_layout Plain Layout

print(fib(0,1)) 
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
The results are as follows:
\end_layout

\begin_layout Paragraph*
Note that cpp compilation takes a lot of time compared to python execution
 but cpp execution is way faster(however, this is still not a fair test
 due to the preprocessing stage of CPP that is enlarged by a lot of unnecessary
 includes which are not being used but are needed for a single functionality).
 Also note the initial drop in cpp compilation and python execution(includes
 compilation) : that is probably due to cache benefits which is supported
 by the fact that it peaks again at around the 25th run for cpp due to a
 process switch.
\end_layout

\begin_layout Paragraph*
\begin_inset External
	template PDFPages
	filename /home/rajp152k/links/sem5/compilers2/assignments/mini-assignment-1/source/Analysis_Q1.pdf
	extra LaTeX "pages=-"

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
specifics
\end_layout

\begin_layout Standard
From here onwards, I'll be talking in terms of clang and not gcc.
 The interpreter on the other hand, does all this at once.
\end_layout

\begin_layout Subsubsection
Errors, Type inference and memory management: generic commments
\end_layout

\begin_layout Standard
This is done in the Parsing and Semantic analysis stage and if you only
 run the compiler with -E flag, you won't get type warnings.
 This time, I use the following type incoherent program
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

//test2.cpp
\end_layout

\begin_layout Plain Layout

int main(){
\end_layout

\begin_layout Plain Layout

        auto temp = [](vector<int> x){
\end_layout

\begin_layout Plain Layout

                return  true;
\end_layout

\begin_layout Plain Layout

        };         
\end_layout

\begin_layout Plain Layout

		int x = /x/;
\end_layout

\begin_layout Plain Layout

        temp(x++);
\end_layout

\begin_layout Plain Layout

        return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This, by no means, makes sense.
 It shouldn't compile and it doesn't as :
\end_layout

\begin_layout Itemize
the compiler doesn't know what's a vector
\end_layout

\begin_layout Itemize
it doesn't know what is /x/ is supposed to do
\end_layout

\begin_layout Itemize
temp's type at call time is incorrect.
\end_layout

\begin_layout Standard
But, if you run `clang++ -E test2.cpp` : you recieve no errors as in the
 pre-processing stage only includes and macros are expanded along with producing
 a token stream.
 However, `clang++ test2.cpp` gives you all the expected errors.
\end_layout

\begin_layout Standard
Talking in terms of the interpreter, you would get this all at once during
 the REPL.
 
\end_layout

\begin_layout Standard
The Memory management model is a part of the language and not the implementation
(compiler vs interpreter).
 In our case, python has a garbage collector but also allows for manual
 management using a wrapper API calling C's memory management utitilies.
 C++ on the other hand is manually managed, but one could alway dispatch
 a sibling process acting as a garbage collecter implemented using shared_ptr
 : which is what JAVA can be described by.
 
\end_layout

\begin_layout Standard
For the intermediate representation, I use the dis.dis module from python
 and -S flag for C++ and these are the results( I kept the programs very
 simple)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

//test3.cpp
\end_layout

\begin_layout Plain Layout

int main(){
\end_layout

\begin_layout Plain Layout

	int x=2;
\end_layout

\begin_layout Plain Layout

	return x+2;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// run using `clang++ -S test3.cpp` and observe test3.s
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#test3.py
\end_layout

\begin_layout Plain Layout

from dis import dis as da
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def main():
\end_layout

\begin_layout Plain Layout

	x=2
\end_layout

\begin_layout Plain Layout

	return x+2;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

da(main)
\end_layout

\begin_layout Plain Layout

# observe test3_py_ir using `python test3.py > test3_py_ir`
\end_layout

\end_inset


\end_layout

\begin_layout Standard
They are somewhat similar (ignore size).
 I did not use any #includes to limit the size of the generated cpp assembly.
 The python version imitates a DFA : functions manipulating the stack state:
 you can also push in lambdas to the dis-assembler and treat it as data
 rather than code.
 You also have a call stack over that and hence two stacks make it a turing
 complete interpretation.
\end_layout

\begin_layout Standard
The C++ version looks more like a turing machine with a definite amount
 of registers and is somewhat more cryptic.
\end_layout

\begin_layout Standard
Here are the outputs.
\end_layout

\begin_layout Subsubsection
test3.s
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "/home/rajp152k/links/sem5/compilers2/assignments/mini-assignment-1/source/test3.s"
lstparams "caption={test3.s}"

\end_inset


\end_layout

\begin_layout Subsubsection
test3_py_ir
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "/home/rajp152k/links/sem5/compilers2/assignments/mini-assignment-1/source/test3_py_ir"
lstparams "caption={test3_py_ir}"

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Lexical analysers and parsers in GCC & Clang
\end_layout

\begin_layout Standard
GCC uses a handwritten lexical analyser (I'll check the c++ lexer) that
 lies in the file libcpp/lex.c 
\begin_inset CommandInset href
LatexCommand href
name " libcpp/lex.c "
target "https://code.woboq.org/gcc/libcpp/lex.c.html"

\end_inset

.
 Some observations regarding the same:
\end_layout

\begin_layout Itemize
lines :247-263 : the actual word(the computing sense) stream reader that
 reads the source byte stream word by word, making calls to handle the intricaci
es.
\end_layout

\begin_deeper
\begin_layout Itemize
too low a level: bitmasking and other stuff is being handled manually.
\end_layout

\end_deeper
\begin_layout Itemize
a lot of low level special handling cases have separate calls : string,
 raw string , whitespace, numbers, macros and so on
\end_layout

\begin_layout Standard
GCC, naturally, also uses a handwritten parser (checking the one for c this
 time) that lies in 
\begin_inset CommandInset href
LatexCommand href
name "c/c-parser.c"
target "https://code.woboq.org/gcc/gcc/c/c-parser.c.html"

\end_inset

c/c-parser.c.
 Some observations regarding the same:
\end_layout

\begin_layout Itemize
This is relatively more understandable(compared to the lexer) as it works
 on high level tokens provided by the lexer rather than words.
\end_layout

\begin_layout Itemize
a high level observation: it reads in a token one by one in a *token stream
 of type struct c_token which is defined in c/c-parser.h
\end_layout

\begin_deeper
\begin_layout Itemize
check lines 51 to 81 of this file to get an idea : 
\begin_inset CommandInset href
LatexCommand href
name "c/c-parser.h"
target "https://code.woboq.org/gcc/gcc/c/c-parser.h.html#53"

\end_inset

c/c-parser.h
\end_layout

\end_deeper
\begin_layout Standard
Clang also uses a hand-written lexer and parser.
 On a first pass, The variable names and the source code overall seems to
 be more sensible compared to that of the GCC source tree.
 these are the links to the same:
\end_layout

\begin_layout Itemize
Lexer 
\begin_inset CommandInset href
LatexCommand href
name "lib/Lex/Lexer.cpp"
target "https://clang.llvm.org/doxygen/Lexer_8cpp_source.html"

\end_inset

lib/Lex/Lexer.cpp: 
\end_layout

\begin_layout Itemize
Parser 
\begin_inset CommandInset href
LatexCommand href
name "lib/Parse/Parser.cpp"
target "https://code.woboq.org/llvm/clang/lib/Parse/Parser.cpp.html"

\end_inset

lib/Parse/Parser.cpp
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
A note on compilation flags
\end_layout

\begin_layout Standard
sources : gcc and clang man pages
\end_layout

\begin_layout Standard
A compiler can be broken down (in accordance to the toolchain level) in
 multiple stages as follows:
\end_layout

\begin_layout Enumerate
Frontend
\end_layout

\begin_deeper
\begin_layout Enumerate
source code 
\begin_inset Formula $\longrightarrow$
\end_inset


\series bold
Lexical analyser 
\series default

\begin_inset Formula $\longrightarrow$
\end_inset

Token stream
\end_layout

\begin_layout Enumerate
Token stream 
\begin_inset Formula $\longrightarrow$
\end_inset


\series bold
Parser 
\series default

\begin_inset Formula $\longrightarrow$
\end_inset

AST
\end_layout

\begin_layout Enumerate
AST 
\begin_inset Formula $\longrightarrow$
\end_inset


\series bold
Intermediate code generation
\series default
 
\begin_inset Formula $\longrightarrow$
\end_inset

representative code
\end_layout

\end_deeper
\begin_layout Enumerate
Backend
\end_layout

\begin_deeper
\begin_layout Enumerate
representative code 
\begin_inset Formula $\longrightarrow$
\end_inset


\series bold
Optimization 
\series default

\begin_inset Formula $\longrightarrow$
\end_inset

optimized representation(semantically consistent though)
\end_layout

\begin_layout Enumerate
optimized representation 
\begin_inset Formula $\longrightarrow$
\end_inset


\series bold
Target code generation 
\series default

\begin_inset Formula $\longrightarrow$
\end_inset

target platfrom machine code (x86,ARM and so on)
\end_layout

\end_deeper
\begin_layout Standard
All the flags play around tweaking these processes to different extents
 and here is the quick overview of the same (source : GCC and Clang man
 pages)
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features tabularvalignment="middle" tabularwidth="100text%">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="40text%">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clang 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GCC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Output
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-c
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-c
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
compile and assemble but do not link
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*.o 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-E
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-E
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the preprocessor stage: expanding macros and includes here
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*.i / *.ii
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-S
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-S
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
until assembly code generation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*.s
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
flagless
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
flagless
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
everything + linker
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
machine code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-g
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-g
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
produces machine code with symbol table sustained with meaningful names
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
machine code *
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-fsyntax-only
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-fsyntax-only
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
run the preprocessor, parser and type-checking stage(syntax checking)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*i/*.ii + console output for errors
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
quick overview of compilation flags
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
flag
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
default
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reduce compilation cost and be meaningfully debuggable(depends on compiler)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-O0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no optimization
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-O1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
between O0 and O2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-Og
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O1 + better debugging experience
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-O2 / -O
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
moderate level of optimizations : might mess up bad multithreading code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-Os
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O2 + reduced code size 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-Oz
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O2 + further reduced code size
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-O3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O2 + some more optimizations,longer compilations, generates larger code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-Ofast
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
O3 + some aggressive optimizations + can deviate from language standards
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-O4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
currently = O3 (in clang); read appendix to find more about this in the
 context of gcc
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Optimization passes
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Bonus
\end_layout

\begin_layout Standard
For this question, I am using a fairly complex program that covers a lot
 of the complex features of C++ and is also computationally (space and time-wise
) intensive (asymptotically).
\end_layout

\begin_layout Subsection
source code : test4.cpp
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "/home/rajp152k/links/sem5/compilers2/assignments/mini-assignment-1/source/test4.cpp"
lstparams "caption={test4.cpp}"

\end_inset


\end_layout

\begin_layout Subsection
Analysis
\end_layout

\begin_layout Subsubsection
comments
\end_layout

\begin_layout Itemize
I've tested the two tool chains using two ways
\end_layout

\begin_deeper
\begin_layout Itemize
-ftime-report : this outputs what the compiler records as their execution
 times
\end_layout

\begin_layout Itemize
via a python interpreter: calling shell commands
\end_layout

\end_deeper
\begin_layout Itemize
The results are visualized and discussed in bonus.pdf which is also appended
 here
\begin_inset External
	template PDFPages
	filename /home/rajp152k/links/sem5/compilers2/assignments/mini-assignment-1/source/Bonus.pdf
	extra LaTeX "pages=-"

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Appendix
\end_layout

\begin_layout Subsection
sources
\end_layout

\begin_layout Itemize
man pages for gcc and clang
\end_layout

\begin_layout Itemize
gcc source tree: linked at corresponding place
\end_layout

\begin_layout Itemize
clang source tree: linked at corresponding place
\end_layout

\begin_layout Itemize
-O4 in gcc : probably a joke: 
\end_layout

\begin_deeper
\begin_layout Itemize
https://cboard.cprogramming.com/c-programming/125896-gcc-o4-what-use.html
\end_layout

\end_deeper
\end_body
\end_document
